name: Deploy k8s

on: [push, pull_request]

jobs:
  # build:
  #   name: build image
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE_NAME: deploy-test

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build and push image
  #       id: build-image
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: Dockerfile
  #         push: true
  #         tags: lampt2404/deploy-test:latest

  deploy:
    name: deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # needs: [build]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create SSH key
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
          HOST_NAME: ${{ secrets.REMOTE_HOST  }}

        run: |
          mkdir -p ~/.ssh/
          chmod 700 ~/.ssh
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          ssh-keyscan $HOST_NAME > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "$HOST_NAME" > ~/.ssh/known_hosts

      - name: Deploy k8s
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
          HOST_NAME: ${{ secrets.REMOTE_HOST  }}
          USER_NAME: ${{ secrets.REMOTE_USER  }}

        run: |
          ssh ${USER_NAME}@${HOST_NAME} '
            helm upgrade $IMAGE_NAME deploy --install --set-string image.tag=${CI_COMMIT_SHORT_SHA} --namespace wsm --timeout 30m0s
          '
